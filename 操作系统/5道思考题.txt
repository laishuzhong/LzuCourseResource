1. 父进程创立子进程与主程序调用子程序有何不同？
父进程运行的程序，创建了子进程，此时父进程和进程并发执行，是两个进程；主程序调用子程序后，主程序暂停，子程序开始执行，它们还是一个进程

2. 在操作系统中为什么要引入进程这一概念？
为了使程序在多道程序环境下能并发执行，并能对并发执行的程序加以控制和描述，从而在操作系统中引入了进程概念

3. 进程的挂起状态与进程的阻塞状态和就绪状态有何异同？
异：挂起状态需要将一部分程序和数据移出内存，而阻塞和就绪状态不需要，挂起状态处于静止状态，不会竞争处理机，不会申请资源
同：都没有得到CPU的调度执行，PCB都存在于内存中

4. 为什么将进程划分成执行、就绪和阻塞三个基本状态？
根据多道程序执行的特点，进程的运行是走走停停的，所以需要执行和就绪两个状态，处于执行状态的进程占用处理机执行程序，处于等待状态的进程正在等待处理机或者其他某种事件的发展，但是并不是所有的程序在处理机空闲是就能执行——还需要等待其他事件发生比如I/0设备的数据，所以将等待状态的进程再分成两部分，一部分是放在处理机立即能够执行的，就是就绪的进程，另一种就是仍需等待某种事件发生的进程，即阻塞进程

5. 用户级线程和内核支持线程有何区别？
用户级线程：所有线程管理工作都由应用程序完成，不需要内核干涉，控制简单，同一进程中只能同时一个线程运行，如果一个线程使用系统调用而阻塞，整个进程挂起。一个用户级线程的阻塞会导致整个进程的阻塞，不能利用系统的多重 处理

内核支持线程：切换由内核控制，线程切换时，用户态转换为内核态
支持多个处理机，一个进程的多个线程可以同时调度
线程切换需要进行模式切换，开销较大

内核进程OS内核可以感知，用户级线程OS内核无法感知

用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。

在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。

用户级线程的程序实体是运行在用户态下的程序，而内核支持线程的程序实体则是可以运行在任何状态下的程序。